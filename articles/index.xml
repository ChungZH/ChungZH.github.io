<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles on ChungZH's Blog</title><link>https://blog.chungzh.cn/articles/</link><description>Recent content in Articles on ChungZH's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chungzh.cn/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>Treap 学习笔记</title><link>https://blog.chungzh.cn/articles/treap/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/treap/</guid><description>Treap = Tree + Heap
二叉搜索树（BST） 在学习 Treap 之前，需要先了解一下二叉搜索树（BST, Binary Search Tree）：
设 $x$ 是二叉搜索树中的一个结点。如果 $y$ 是 $x$ 左子树中的一个结点，那么 $y.key \lt x.key$。如果 $y$ 是 $x$ 右子树中的一个结点，那么 $y.key \gt x.key$。
BST 上的基本操作所花费的时间与这棵树的高度成正比。对于一个有 $n$ 个结点的二叉搜索树中，这些操作的最优时间复杂度为 $O(\log n)$，最坏为 $O(n)$。随机构造这样一棵二叉搜索树的期望高度为 $O(\log n)$。然而，当这棵树退化成链时，则同样的操作就要花费 $O(n)$ 的最坏运行时间。
由于普通 BST 容易退化，对于它的实现就不再赘述。在实践中需要使用如 Treap 这样的平衡二叉搜索树。
Treap 顾名思义，Treap 是树和堆的结合。它的数据结构既是一个二叉搜索树，又是一个二叉堆。
在 Treap 的每个结点中，除了 $key$ 值，还要保存一个 $fix$（更常见的是 $priority$）值。这个值是随机值，以它为依据来同时建立最大堆（或最小堆）。因为 $fix$ 值是随机的，所以可以让这棵树更加平衡，高度更接近 $O(\log n)$。它的各种操作期望时间复杂度都是 $O(\log n)$。</description></item><item><title>告别 2021</title><link>https://blog.chungzh.cn/articles/goodbye2021/</link><pubDate>Fri, 31 Dec 2021 21:35:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/goodbye2021/</guid><description>这一年还是收获满满的。
OI 上半年去了 GDOI 观摩神仙打架，长了见识。
CSP-J 2021 1=，挺满意的。
年末镇赛第一，虽然说没什么用但是就是挺开心的 😁
总的来说，进步挺大的。
学习 是真正的初中生了。
几次大考，有成功，也有失利。可以说对于学习的心态变成熟了。
值得一提的是，十月份的时候换了一个校长，带来了很多新气象，幸福感不断提升。期待他在以后的表现。
生活 爱上了 🏓 乒乓球，买了一个五百多的拍子，奢侈了一把，真爽（
对运动的热情高涨了很多。
总之，希望在新的一年，一切都会更好！</description></item><item><title>CSP-J 2021 游记</title><link>https://blog.chungzh.cn/articles/csp2021/</link><pubDate>Sat, 23 Oct 2021 18:35:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/csp2021/</guid><description>CSP-J/S 认证注意事项：
&amp;hellip;&amp;hellip;
11. 祝各位选手好运。
CSP-J1 初赛前有点小紧张。
赛前勉强做了几套试卷，然后就上考场了。
刚考完对答案的时候发现 J 组才 72，看洛谷上大家都说今年 J 组简单了 blabla，分数线肯定会升，然而我却觉得好难，那一个星期都害怕极了。。。结果分数出来了才发现洛谷那群人真是扯啊哈哈哈
S 组才 48 分，没有成功压线。（其实就算去了复赛也拿不了分。。
CSP-J2 比赛前一晚上八点在学校出发。逃掉了晚自习（尽管是星期五
去到酒店大概也九点半了，洗完澡，看了会儿凤凰台，然后就睡了。
第二天早上六点半起床，吃完自助餐（和上一年的变化不大，挺好吃的），七点二十出发。
然后进考场。
电脑好像是 Ryzen 3600，8GB 内存。
八点半开考。
密码很乱，6ewid\n16384#，监考员一开始还直接忽略最后面那个井号了。。。
打开题目，发现第一第二题题面好长，有点慌了起来&amp;hellip;
T2 尤为毒瘤，到了 9:22 才搞完了。。。感觉挺很危险的，好怕翻车。
10:08，肝完 T3，77 行代码，写完人都瘫了。。感谢第三个样例，一个一个找情况。。。
（不知道怎么比对两个文件的内容，于是直接打开 Sublime Text 开始用查找来找不同。。。
赶紧吃了根士力架，然后去上了个厕所。
10:55，T4 过样例了，打得比 T3 轻松多了，当然也不可能拿满分。。。其实也不知道该怎么做，直接乱搞，做法非常诡异。。看看效果怎样吧，能骗到 50 分就是胜利。
还有一点，今年 NOI Linux 2 还行。（毕竟上一年给了虚拟机但是系统有密码，根本打不开，笑死）在里面编译了几次代码，虽然也没什么用。运行起来还蛮快的。
总的来说，这次考得还行。题目有点诡异，没有 dp，没有搜索，个人感觉侧重考基本功。
等成绩吧。
UPD 1 (2021/10/23 22:50)：</description></item><item><title>线段树学习笔记</title><link>https://blog.chungzh.cn/articles/segment-tree/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/segment-tree/</guid><description>线段树是一种高端的数据结构，可以用来在区间上进行信息统计。它能够在 $O(logN)$ 的时间复杂度内实现单点/区间修改、区间找最大值/最小值/总和/&amp;hellip;，适用于大规模的区间统计。
如下图就是一棵线段树。在结点中，你可以存对应区间的最大值，最小值，总和等等。
对于每一个结点 $i$，它的两个子结点分别是 $2i$ 和 $2i+1$。因此，在开树的数组时，最好要开到 $4N$ 的大小。
关于 $4N$，详见 OI-Wiki。
建树 下面是一个求区间和的线段树的建树代码。
通过 DFS 建树，到叶结点，然后一路回溯求出和。
1 2 3 4 5 6 7 8 9 10 11 12 13 void build_tree(int cur, int left, int right) { // cur 为当前树的根，[left, right] 是当前树对应的区间 if (left == right) { // 到叶子节点了，区间长度为 1，总和就是它本身 tree[cur] = a[left]; return ; } int leftSon = cur*2, rightSon = leftSon+1; int mid = (left+right)/2; build_tree(leftSon, left, mid); build_tree(rightSon, mid+1, right); tree[cur] = tree[leftSon]+tree[rightSon]; // 求和 } 这里求 leftSon，rightSon，mid 的模式在线段树的所有操作中都会用到。</description></item><item><title>我所热爱的，就是这所学校</title><link>https://blog.chungzh.cn/articles/ilovesmes/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/ilovesmes/</guid><description>*** 你 * 什么时候 * 啊？
好不容易才从期末的阴霾中摆脱，欢乐地进入了暑假。
十五天的补习？不慌。十天的信息学夏令营？没事，确实对我有帮助。
&amp;hellip;&amp;hellip;
于是还是开始了美好的暑假生活。
不过就在今天，老师突然在群里发了一则消息：
优秀的各位家长：
*** 班初定 7 月 22 日至 7 月 30 日在学校组织“夏令营”活动，请大家提前做好安排，有问题可以私信我。
我当场傻掉。
双引号加得真的好啊！
还有这个语气，并不是在征求意见嘛！
妙啊！
不就是成绩不如其他民办学校了吗？
这只是一天两天的事情吗？难道是我们这一届太垃圾了吗？但是，以前就很厉害了吗？那么请问，为什么我们学校不敢宣传今年中考的成绩呢？
我承认我们这一届摇号进来的占多数，比以前差了点。但我还是想请问一下敬爱的领导和老师们，你们有想过自己的问题吗？
为什么我们比其他学校花的时间都要多，成绩却还是不如人呢？是我们学生还不够努力吗？
我想不是。
从入学到现在，已经过了一年了。现在再回望入学前对这所学校的憧憬、期待，我觉得很不可思议。
现在，我校口碑已经大不如前了。如果敬爱的领导和老师们不及时悬崖勒马的话，你们就赚不了钱了！
最后，我还是想重复开头的那句话。
*** 你 * 什么时候 * 啊？
不管怎样，我还是很尊重带我们的各科老师。不可否认的是，你们都很有责任心，一直陪着我们加班。感谢你们！</description></item><item><title>Hello Hugo!</title><link>https://blog.chungzh.cn/articles/hello-hugo/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/hello-hugo/</guid><description>暑假来了，顺便把博客更新一下。
从以前的 Vuepress 变成了 Hugo，速度真的快了很多，不愧是 &amp;ldquo;The world’s fastest&amp;rdquo;。用的主题是 Tania，很简洁、漂亮。Hugo 非常易用，不到半天就完整迁移过来了。我可以很肯定地说这一次博客迁移是有史以来最快的一次。
CI 用的是 GitHub Actions:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 name:github pageson:push:branches:- hugo # Set a branch to deploypull_request:jobs:deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:&amp;#39;latest&amp;#39;# extended: true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.</description></item><item><title>CSP-J 2020 游记</title><link>https://blog.chungzh.cn/articles/csp-j-2020/</link><pubDate>Sat, 14 Nov 2020 17:15:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/csp-j-2020/</guid><description>嘤嘤嘤</description></item><item><title>Notepanda 开发小结</title><link>https://blog.chungzh.cn/articles/notepanda/</link><pubDate>Sat, 16 May 2020 10:45:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/notepanda/</guid><description>别看题目这么正经，其实就是一小玩具！揪咪～</description></item><item><title>一款纯粹的 UWP 记事本——Notepads</title><link>https://blog.chungzh.cn/articles/notepads/</link><pubDate>Mon, 06 Apr 2020 12:45:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/notepads/</guid><description>漂亮的记事本，完美替代 win32 notepad！</description></item><item><title>Windows 中 C++ 测量时间的 N 种方法</title><link>https://blog.chungzh.cn/articles/cpp-get-time/</link><pubDate>Sun, 29 Mar 2020 13:13:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/cpp-get-time/</guid><description>测量可测量之物，将不可测量之物变为可测量。——伽利略</description></item><item><title>优雅地使用 C++ 制作表格：tabulate</title><link>https://blog.chungzh.cn/articles/tabulate/</link><pubDate>Fri, 21 Feb 2020 11:45:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/tabulate/</guid><description>优雅地用 C++ 做表格！</description></item><item><title>2020 DL 信息学冬令营游记</title><link>https://blog.chungzh.cn/articles/2020dlwintercamp/</link><pubDate>Mon, 20 Jan 2020 16:03:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/2020dlwintercamp/</guid><description>谨以此文，纪念那逝去的五日快乐时光~</description></item><item><title>DLOI 2019 游记</title><link>https://blog.chungzh.cn/articles/dloi-2019/</link><pubDate>Sun, 22 Dec 2019 19:03:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/dloi-2019/</guid><description>嘤嘤嘤又被大佬狂虐了</description></item><item><title>谁说 C/C++ 没有好的包管理器？这里来一沓！</title><link>https://blog.chungzh.cn/articles/c-cpp-package-manager/</link><pubDate>Sun, 25 Aug 2019 11:41:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/c-cpp-package-manager/</guid><description>C++ 万岁~(≧▽≦)/~！</description></item><item><title>NHOI 2019 游记</title><link>https://blog.chungzh.cn/articles/nhoi-2019/</link><pubDate>Sun, 02 Jun 2019 12:07:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/nhoi-2019/</guid><description>百尺竿头 更进一步！</description></item><item><title>创建 Vuepress 博客并使用 Git 管理</title><link>https://blog.chungzh.cn/articles/create-vuepress-blog-and-use-git-manger-it/</link><pubDate>Sat, 02 Mar 2019 12:28:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/create-vuepress-blog-and-use-git-manger-it/</guid><description>又双叒叕搞博客了</description></item><item><title>美化你的 Powershell</title><link>https://blog.chungzh.cn/articles/beautify-your-powershell/</link><pubDate>Sat, 23 Feb 2019 11:50:00 +0000</pubDate><guid>https://blog.chungzh.cn/articles/beautify-your-powershell/</guid><description>介绍一下 Powershell 的美化方式。</description></item></channel></rss>